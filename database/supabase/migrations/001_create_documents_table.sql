-- Enable the vector extension for pgvector
CREATE EXTENSION IF NOT EXISTS vector;

-- Create documents table for RAG system
CREATE TABLE IF NOT EXISTS documents (
  -- Primary identification
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),

  -- Document content
  title TEXT NOT NULL,
  content TEXT NOT NULL,

  -- Vector embedding (1536 dimensions for text-embedding-3-small)
  embedding VECTOR(1536),

  -- Metadata and chunking information
  metadata JSONB DEFAULT '{}'::jsonb,
  chunk_index INTEGER DEFAULT 0,
  parent_document_id UUID,

  -- File information
  file_name TEXT,
  file_size INTEGER,
  mime_type TEXT DEFAULT 'application/pdf',

  -- Timestamps
  created_at TIMESTAMPTZ DEFAULT NOW(),
  updated_at TIMESTAMPTZ DEFAULT NOW()
);

-- Create index for vector similarity search (cosine distance)
-- Using ivfflat for fast approximate nearest neighbor search
CREATE INDEX IF NOT EXISTS documents_embedding_idx ON documents
USING ivfflat (embedding vector_cosine_ops)
WITH (lists = 100);

-- Create index for parent document lookups
CREATE INDEX IF NOT EXISTS documents_parent_id_idx ON documents(parent_document_id);

-- Create index for timestamp queries
CREATE INDEX IF NOT EXISTS documents_created_at_idx ON documents(created_at DESC);

-- Create function to update updated_at timestamp
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = NOW();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Create trigger to automatically update updated_at
CREATE TRIGGER update_documents_updated_at
BEFORE UPDATE ON documents
FOR EACH ROW
EXECUTE FUNCTION update_updated_at_column();

-- Create function for similarity search
CREATE OR REPLACE FUNCTION match_documents(
  query_embedding VECTOR(1536),
  match_threshold FLOAT DEFAULT 0.7,
  match_count INT DEFAULT 5
)
RETURNS TABLE (
  id UUID,
  title TEXT,
  content TEXT,
  metadata JSONB,
  chunk_index INTEGER,
  parent_document_id UUID,
  similarity FLOAT
)
LANGUAGE plpgsql
AS $$
BEGIN
  RETURN QUERY
  SELECT
    documents.id,
    documents.title,
    documents.content,
    documents.metadata,
    documents.chunk_index,
    documents.parent_document_id,
    1 - (documents.embedding <=> query_embedding) AS similarity
  FROM documents
  WHERE 1 - (documents.embedding <=> query_embedding) > match_threshold
  ORDER BY documents.embedding <=> query_embedding
  LIMIT match_count;
END;
$$;

-- Add helpful comments
COMMENT ON TABLE documents IS 'Stores document chunks with vector embeddings for RAG system';
COMMENT ON COLUMN documents.embedding IS 'Vector embedding generated by OpenAI text-embedding-3-small (1536 dimensions)';
COMMENT ON COLUMN documents.parent_document_id IS 'References the original document if this is a chunk';
COMMENT ON FUNCTION match_documents IS 'Performs similarity search on document embeddings using cosine distance';
